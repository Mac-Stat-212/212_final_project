---
title: "Final Project Blog"
format: html
runtime: shiny
editor: visual
---

```{r setup, message=FALSE, echo=FALSE}
library(tidyverse)
library(ggplot2)
library(shiny)
library(plotly)
```

```{r data, message=FALSE, echo=FALSE}
finished_data <- read.csv("../data/finished_data.csv")
```

## Intro, initial graphs, and analysis

This will be the main storytelling component of our project.

We came to this project with one simple question: Are there biases that impact the daily highs and lows in which stocks are traded? In theory, stocks prices should be random, as firms valuations depend on a multitude of factors that are impossible to predict.

However, humans execute transactions and we wondered if there is a tendency for daily highs and low prices to cluster around rounded numbers. At first, we thought the best approach would be to investigate the nominal value of a stock. But quickly, we realised stocks tendency to trade in values less than 5 dollars, was simply because there are more small companies listed in the stock market than larger ones. Then, we came up with the idea of investigating if the last two decimal places of a stock, essentially, its ending cent vaue, clustered around rounded numbers.

We extracted data from yahoo finnance from 2019 to 2023 and plotted a graph to depict what were the most common edning cent values in which daily lows (Figure 1) and daily highs (Figure 2) encountered.

```{r}
# Define the metric you want to visualize
chosen_metric <- "High"  # Replace with the metric of your choice

# Create the label dynamically based on the metric
label <- str_c(chosen_metric, "_cat")

# Generate the bar plot
p <- finished_data %>%
  group_by(!!sym(label)) %>%
  count() %>%
  mutate(cent_price = as.numeric(!!sym(label)) / 100) %>%  # Convert to cent price
  ggplot() +
  geom_bar(aes(x = cent_price, y = n), stat = "identity", fill = "green") +
  labs(
    title = paste("Daily highs, last two digits (cent price): 2019-2024"),
    x = "Cent price",
    y = "Number of Trades"
  ) +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma) +  # Ensure y-axis values are regular counts
  theme_minimal()


# Display the plot
print(p)

```

```{r}
# Define the metric you want to visualize
chosen_metric <- "Low"  # Replace with the metric of your choice

# Create the label dynamically based on the metric
label <- str_c(chosen_metric, "_cat")

# Generate the bar plot
p <- finished_data %>%
  group_by(!!sym(label)) %>%
  count() %>%
  mutate(cent_price = as.numeric(!!sym(label)) / 100) %>%  # Convert to cent price
  ggplot() +
  geom_bar(aes(x = cent_price, y = n), stat = "identity", fill = "red") +
  labs(
    title = paste("Daily Lows, last two digits (cent price): 2019-2024"),
    x = "Cent price",
    y = "Number of Trades"
  ) +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma) +  # Ensure y-axis values are regular counts
  theme_minimal()


# Display the plot
print(p)
```

One of the concerns we had was that low volume stocks were driving this behavior. For example, some stocks can be as pricey as 200,000 dollars, and those stocks are usually traded at rounded numbers and by very few individuals. Thus, we plotted the same two graphs below for stocks that had a median volume (that is, number of trades per day) larger than 10,000. And yet, we found the same behavior, as shown below:

```{r}
# Define the metric you want to visualize
chosen_metric <- "High"  # Replace with the metric of your choice

# Create the label dynamically based on the metric
label <- str_c(chosen_metric, "_cat")

# Filter the data for stocks with a median volume > 10,000
filtered_data <- finished_data %>%
  group_by(stock_name) %>%
  filter(median(Volume, na.rm = TRUE) > 10000) %>%
  ungroup()

# Generate the bar plot
p <- filtered_data %>%
  group_by(!!sym(label)) %>%
  count() %>%
  mutate(cent_price = as.numeric(!!sym(label)) / 100) %>%  # Convert to cent price
  ggplot() +
  geom_bar(aes(x = cent_price, y = n), stat = "identity", fill = "green") +
  labs(
    title = "Daily Highs, last two digits (cent price): 2019-2024",
    x = "Cent Price",
    y = "Number of Trades"
  ) +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma)  # Ensure y-axis values are regular counts

# Display the plot
print(p)
```

```{r}
# Define the metric you want to visualize
chosen_metric <- "Low"  # Replace with the metric of your choice

# Create the label dynamically based on the metric
label <- str_c(chosen_metric, "_cat")

# Filter the data for stocks with a median volume > 10,000
filtered_data <- finished_data %>%
  group_by(stock_name) %>%
  filter(median(Volume, na.rm = TRUE) > 10000) %>%
  ungroup()

# Generate the bar plot
p <- filtered_data %>%
  group_by(!!sym(label)) %>%
  count() %>%
  mutate(cent_price = as.numeric(!!sym(label)) / 100) %>%  # Convert to cent price
  ggplot() +
  geom_bar(aes(x = cent_price, y = n), stat = "identity", fill = "red") +
  labs(
    title = "Daily Lows, last two digits (cent price): 2019-2024",
    x = "Cent Price",
    y = "Number of Trades"
  ) +
  theme_minimal() +
  scale_y_continuous(labels = scales::comma)  # Ensure y-axis values are regular counts

# Display the plot
print(p)
```

If we look closer, another insight we get from the graph is that daily highs and daily lows both peak at rounded cent values, but they behave slightly different on how they approach to that peak. When approaching a daily high, traders keep buying until it reaches the 0 value, with lots of trades ending at 99 cents. Instead, when approaching a daily low, traders will buy at 0.01 and stop buying at .99. This behavior further reinforces the trend, as these barriers act as as support and tension price points.

## Shiny

To enable user analysis of these trends, we created an interactive shiny app allowing readers to view a graph of the company and metric of their choice.

```{r shiny, message=FALSE, echo=FALSE}
# Grab the input vectors we need
metrics <- c("Open", "High", "Low", "Close", "Adj.Close")
stock_names <- finished_data %>% filter(Size == "big") %>% pull(stock_name) %>% unique() %>% sort() # For now, only the biggest companies are included as options, to keep the dropdown manageable

# Define UI
ui <- fluidPage(

    # Application title
    titlePanel("Stock Data Visualization"),

    # Dropdowns to enable user input 
    sidebarLayout(
        sidebarPanel(
          selectInput("stock_names",
                      "Stock:",
                      choices = stock_names),
          selectInput("metrics",
                      "Metric:",
                      choices = metrics)
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotlyOutput("linePlot")
        )
    )
)

# Define server logic required to draw line graph
server <- function(input, output) {

  output$linePlot <- renderPlotly({
    label <- str_c(input$metrics, "_cat") # Dynamic column reference
    p <- finished_data %>%
      filter(stock_name == input$stock_names) %>% # Filter to the chosen stock's data
      group_by(!!sym(label)) %>% 
      count() %>% 
      mutate({{label}} := as.numeric(!!sym(label))/100) %>% # This weird syntax is necessary because R treats the dynamic label as a string, rather than a column name
      ggplot() +
      geom_line(aes(x = !!sym(label), y = n)) +
      labs(title = "", x = "Cent Price", y = str_c("Recorded ", input$metrics, "s")) + # Dynamic axis labeling
      theme_minimal()
    ggplotly(p)
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
```
